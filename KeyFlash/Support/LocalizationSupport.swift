import Foundation

/// Utility functions to support localization
class LocalizationSupport {
    /// Check if all language directories exist, and create them if they don't
    static func ensureLanguageDirectoriesExist() {
        // Get the path to the app's Resources directory
        guard let resourcesPath = Bundle.main.resourcePath else {
            print("Failed to get resource path")
            return
        }
        
        // Create directories for all supported languages
        for language in AppLanguage.allCases {
            let lprojPath = "\(resourcesPath)/\(language.rawValue).lproj"
            
            // Check if the directory exists
            let fileManager = FileManager.default
            var isDir: ObjCBool = false
            let exists = fileManager.fileExists(atPath: lprojPath, isDirectory: &isDir)
            
            if !exists || !isDir.boolValue {
                do {
                    try fileManager.createDirectory(atPath: lprojPath, withIntermediateDirectories: true)
                    print("Created language directory: \(lprojPath)")
                    
                    // Create an empty strings file if it doesn't exist
                    let stringsPath = "\(lprojPath)/Localizable.strings"
                    if !fileManager.fileExists(atPath: stringsPath) {
                        let emptyContent = "/* Generated by KeyFlash */\n"
                        try emptyContent.write(toFile: stringsPath, atomically: true, encoding: .utf8)
                    }
                } catch {
                    print("Failed to create language directory: \(error.localizedDescription)")
                }
            }
        }
    }
    
    /// Load localizations from the disk for the specified language
    static func loadLocalizations(for language: AppLanguage) -> [String: String] {
        guard let languageBundle = Bundle(path: "\(Bundle.main.resourcePath!)/\(language.rawValue).lproj") else {
            return [:]
        }
        
        guard let stringsPath = languageBundle.path(forResource: "Localizable", ofType: "strings") else {
            return [:]
        }
        
        return NSDictionary(contentsOfFile: stringsPath) as? [String: String] ?? [:]
    }
} 